generator client {
  provider = "prisma-client"
  output   = "../src/providers/database/generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ExamType {
  InSchedule  // ในตาราง
  OutSchedule // นอกตาราง
}

enum Level {
  Pvoc // ปวช
  Pvs  // ปวส
}

enum Role {
  USER
  Admin
}

model Department {
  id       String @id @default(cuid()) @db.Uuid
  name     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  classes  Class[]
  teachers Teacher[]

  @@index([name])
}

model Course {
  id       String   @id @default(cuid()) @db.Uuid
  code     String   @unique
  name     String
  duration Int
  examType ExamType @default(InSchedule)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  enrollments  Enrollment[]
  courseGroups CourseGroup[]

  @@index([code, name])
}

model Class {
  id            String @id @default(cuid()) @db.Uuid
  name          String
  level         Level  @default(Pvoc)
  classYear     String
  department_id String
  amount        Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  department  Department   @relation(fields: [department_id], references: [id])
  enrollments Enrollment[]

  @@index([department_id, classYear])
}

model Enrollment {
  id        String @id @default(cuid()) @db.Uuid
  class_id  String
  course_id String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  class  Class  @relation(fields: [class_id], references: [id])
  course Course? @relation(fields: [course_id], references: [id])

  @@unique([class_id, course_id])
  @@index([class_id, course_id])
}

model CourseGroup {
  id        String @id @default(cuid())
  course_id String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course Course @relation(fields: [course_id], references: [id])

  @@index([course_id])
}

model Room {
  id         String @id @default(cuid()) @db.Uuid
  roomNumber String @unique
  building   String
  floor      String
  capacity   Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([roomNumber, building])
}

model Teacher {
  id            String @id @default(cuid()) @db.Uuid
  name          String
  department_id String
  tel           String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  department   Department @relation(fields: [department_id], references: [id], name: "fk_teacher_department")
  proctorPairs ProctorPair[]

  @@index([name, department_id])
}

model ProctorPair {
  id         String @id @default(cuid()) @db.Uuid
  teacher_id String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  teacher Teacher @relation(fields: [teacher_id], references: [id], name: "fk_proctorpair_teacher")

  @@index([teacher_id])
}

model User {
  id        String @id @default(cuid()) @db.Uuid
  firstname String
  lastname  String
  username  String
  password  String
  email     String?
  role      Role @default(USER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tokens    Token[]

  @@unique([username, email])
}

model Token {
  id         String @id @default(cuid()) @db.Uuid
  token      String @unique
  user_id    String
  expires_at DateTime
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id])

  @@index([user_id])
  @@map("tokens")
}
