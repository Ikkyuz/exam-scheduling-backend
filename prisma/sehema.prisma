generator client {
    provider = "prisma-client"
    output   = "../src/providers/database/generated"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

enum ExamType {
    InSchedule // ในตาราง
    OutSchedule // นอกตาราง
}

enum Level {
    Pvoc // ปวช
    Pvs // ปวส
}

enum Role {
    USER
    Admin
}

model Department {
    id   String @id @default(cuid()) @db.VarChar(25)
    name String @db.VarChar(100)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    classes  Class[]
    teachers Teacher[]

    @@index([name])
}

model Course {
    id       String   @id @default(cuid()) @db.VarChar(25)
    code     String   @unique @db.VarChar(10)
    name     String   @db.VarChar(100)
    duration Int
    examType ExamType @default(InSchedule)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    enrollments  Enrollment[]
    courseGroups CourseGroup[]

    @@index([code, name])
}

model Class {
    id            String @id @default(cuid()) @db.VarChar(25)
    name          String @db.VarChar(100)
    level         Level  @default(Pvoc)
    classYear     String @db.VarChar(4)
    department_id String @db.VarChar(25)
    amount        Int    @db.Int()

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    department  Department   @relation(fields: [department_id], references: [id])
    enrollments Enrollment[]

    @@index([department_id])
}

model Enrollment {
    id        String @id @default(cuid()) @db.VarChar(25)
    class_id  String @db.VarChar(25)
    course_id String @db.VarChar(25)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    class  Class  @relation(fields: [class_id], references: [id])
    course Course @relation(fields: [course_id], references: [id])

    @@unique([class_id, course_id])
    @@index([class_id, course_id])
}

model CourseGroup {
    id        String @id @default(cuid()) @db.VarChar(25)
    course_id String @db.VarChar(25)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    course Course @relation(fields: [course_id], references: [id])

    @@index([course_id])
}

model Room {
    id         String @id @default(cuid()) @db.VarChar(25)
    roomNumber String @unique @db.VarChar(100)
    building   String @db.VarChar(10)
    floor      String @db.VarChar(10)
    capacity   Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([roomNumber, building])
}

model Teacher {
    id            String @id @default(cuid()) @db.VarChar(25)
    name          String @db.VarChar(100)
    department_id String @db.VarChar(25)
    tel           String @unique @db.VarChar(15)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    department   Department    @relation(fields: [department_id], references: [id])
    proctorPairs ProctorPair[]

    @@index([name, department_id])
}

model ProctorPair {
    id         String @id @default(cuid()) @db.VarChar(25)
    teacher_id String @db.VarChar(25)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    teacher Teacher @relation(fields: [teacher_id], references: [id])

    @@index([teacher_id])
}

model User {
    id        String  @id @default(cuid()) @db.VarChar(25)
    firstname String
    lastname  String
    username  String  @unique
    password  String
    email     String?
    role      Role    @default(USER)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    tokens    Token[]
}

model Token {
    id         String   @id @default(cuid()) @db.VarChar(25)
    token      String   @unique
    user_id    String
    expires_at DateTime
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    user User @relation(fields: [user_id], references: [id])

    @@index([user_id])
    @@map("tokens")
}
