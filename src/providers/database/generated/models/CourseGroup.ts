
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `CourseGroup` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model CourseGroup
 * 
 */
export type CourseGroupModel = runtime.Types.Result.DefaultSelection<Prisma.$CourseGroupPayload>

export type AggregateCourseGroup = {
  _count: CourseGroupCountAggregateOutputType | null
  _min: CourseGroupMinAggregateOutputType | null
  _max: CourseGroupMaxAggregateOutputType | null
}

export type CourseGroupMinAggregateOutputType = {
  id: string | null
  course_id: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type CourseGroupMaxAggregateOutputType = {
  id: string | null
  course_id: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type CourseGroupCountAggregateOutputType = {
  id: number
  course_id: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type CourseGroupMinAggregateInputType = {
  id?: true
  course_id?: true
  createdAt?: true
  updatedAt?: true
}

export type CourseGroupMaxAggregateInputType = {
  id?: true
  course_id?: true
  createdAt?: true
  updatedAt?: true
}

export type CourseGroupCountAggregateInputType = {
  id?: true
  course_id?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type CourseGroupAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which CourseGroup to aggregate.
   */
  where?: Prisma.CourseGroupWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CourseGroups to fetch.
   */
  orderBy?: Prisma.CourseGroupOrderByWithRelationInput | Prisma.CourseGroupOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.CourseGroupWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CourseGroups from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CourseGroups.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned CourseGroups
  **/
  _count?: true | CourseGroupCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: CourseGroupMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: CourseGroupMaxAggregateInputType
}

export type GetCourseGroupAggregateType<T extends CourseGroupAggregateArgs> = {
      [P in keyof T & keyof AggregateCourseGroup]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCourseGroup[P]>
    : Prisma.GetScalarType<T[P], AggregateCourseGroup[P]>
}




export type CourseGroupGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CourseGroupWhereInput
  orderBy?: Prisma.CourseGroupOrderByWithAggregationInput | Prisma.CourseGroupOrderByWithAggregationInput[]
  by: Prisma.CourseGroupScalarFieldEnum[] | Prisma.CourseGroupScalarFieldEnum
  having?: Prisma.CourseGroupScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: CourseGroupCountAggregateInputType | true
  _min?: CourseGroupMinAggregateInputType
  _max?: CourseGroupMaxAggregateInputType
}

export type CourseGroupGroupByOutputType = {
  id: string
  course_id: string
  createdAt: Date
  updatedAt: Date
  _count: CourseGroupCountAggregateOutputType | null
  _min: CourseGroupMinAggregateOutputType | null
  _max: CourseGroupMaxAggregateOutputType | null
}

type GetCourseGroupGroupByPayload<T extends CourseGroupGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<CourseGroupGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof CourseGroupGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], CourseGroupGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], CourseGroupGroupByOutputType[P]>
      }
    >
  >



export type CourseGroupWhereInput = {
  AND?: Prisma.CourseGroupWhereInput | Prisma.CourseGroupWhereInput[]
  OR?: Prisma.CourseGroupWhereInput[]
  NOT?: Prisma.CourseGroupWhereInput | Prisma.CourseGroupWhereInput[]
  id?: Prisma.StringFilter<"CourseGroup"> | string
  course_id?: Prisma.StringFilter<"CourseGroup"> | string
  createdAt?: Prisma.DateTimeFilter<"CourseGroup"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"CourseGroup"> | Date | string
  course?: Prisma.XOR<Prisma.CourseScalarRelationFilter, Prisma.CourseWhereInput>
}

export type CourseGroupOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  course_id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  course?: Prisma.CourseOrderByWithRelationInput
  _relevance?: Prisma.CourseGroupOrderByRelevanceInput
}

export type CourseGroupWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.CourseGroupWhereInput | Prisma.CourseGroupWhereInput[]
  OR?: Prisma.CourseGroupWhereInput[]
  NOT?: Prisma.CourseGroupWhereInput | Prisma.CourseGroupWhereInput[]
  course_id?: Prisma.StringFilter<"CourseGroup"> | string
  createdAt?: Prisma.DateTimeFilter<"CourseGroup"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"CourseGroup"> | Date | string
  course?: Prisma.XOR<Prisma.CourseScalarRelationFilter, Prisma.CourseWhereInput>
}, "id">

export type CourseGroupOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  course_id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.CourseGroupCountOrderByAggregateInput
  _max?: Prisma.CourseGroupMaxOrderByAggregateInput
  _min?: Prisma.CourseGroupMinOrderByAggregateInput
}

export type CourseGroupScalarWhereWithAggregatesInput = {
  AND?: Prisma.CourseGroupScalarWhereWithAggregatesInput | Prisma.CourseGroupScalarWhereWithAggregatesInput[]
  OR?: Prisma.CourseGroupScalarWhereWithAggregatesInput[]
  NOT?: Prisma.CourseGroupScalarWhereWithAggregatesInput | Prisma.CourseGroupScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"CourseGroup"> | string
  course_id?: Prisma.StringWithAggregatesFilter<"CourseGroup"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"CourseGroup"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"CourseGroup"> | Date | string
}

export type CourseGroupCreateInput = {
  id?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  course: Prisma.CourseCreateNestedOneWithoutCourseGroupsInput
}

export type CourseGroupUncheckedCreateInput = {
  id?: string
  course_id: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type CourseGroupUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  course?: Prisma.CourseUpdateOneRequiredWithoutCourseGroupsNestedInput
}

export type CourseGroupUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  course_id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CourseGroupCreateManyInput = {
  id?: string
  course_id: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type CourseGroupUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CourseGroupUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  course_id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CourseGroupListRelationFilter = {
  every?: Prisma.CourseGroupWhereInput
  some?: Prisma.CourseGroupWhereInput
  none?: Prisma.CourseGroupWhereInput
}

export type CourseGroupOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type CourseGroupOrderByRelevanceInput = {
  fields: Prisma.CourseGroupOrderByRelevanceFieldEnum | Prisma.CourseGroupOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type CourseGroupCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  course_id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type CourseGroupMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  course_id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type CourseGroupMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  course_id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type CourseGroupCreateNestedManyWithoutCourseInput = {
  create?: Prisma.XOR<Prisma.CourseGroupCreateWithoutCourseInput, Prisma.CourseGroupUncheckedCreateWithoutCourseInput> | Prisma.CourseGroupCreateWithoutCourseInput[] | Prisma.CourseGroupUncheckedCreateWithoutCourseInput[]
  connectOrCreate?: Prisma.CourseGroupCreateOrConnectWithoutCourseInput | Prisma.CourseGroupCreateOrConnectWithoutCourseInput[]
  createMany?: Prisma.CourseGroupCreateManyCourseInputEnvelope
  connect?: Prisma.CourseGroupWhereUniqueInput | Prisma.CourseGroupWhereUniqueInput[]
}

export type CourseGroupUncheckedCreateNestedManyWithoutCourseInput = {
  create?: Prisma.XOR<Prisma.CourseGroupCreateWithoutCourseInput, Prisma.CourseGroupUncheckedCreateWithoutCourseInput> | Prisma.CourseGroupCreateWithoutCourseInput[] | Prisma.CourseGroupUncheckedCreateWithoutCourseInput[]
  connectOrCreate?: Prisma.CourseGroupCreateOrConnectWithoutCourseInput | Prisma.CourseGroupCreateOrConnectWithoutCourseInput[]
  createMany?: Prisma.CourseGroupCreateManyCourseInputEnvelope
  connect?: Prisma.CourseGroupWhereUniqueInput | Prisma.CourseGroupWhereUniqueInput[]
}

export type CourseGroupUpdateManyWithoutCourseNestedInput = {
  create?: Prisma.XOR<Prisma.CourseGroupCreateWithoutCourseInput, Prisma.CourseGroupUncheckedCreateWithoutCourseInput> | Prisma.CourseGroupCreateWithoutCourseInput[] | Prisma.CourseGroupUncheckedCreateWithoutCourseInput[]
  connectOrCreate?: Prisma.CourseGroupCreateOrConnectWithoutCourseInput | Prisma.CourseGroupCreateOrConnectWithoutCourseInput[]
  upsert?: Prisma.CourseGroupUpsertWithWhereUniqueWithoutCourseInput | Prisma.CourseGroupUpsertWithWhereUniqueWithoutCourseInput[]
  createMany?: Prisma.CourseGroupCreateManyCourseInputEnvelope
  set?: Prisma.CourseGroupWhereUniqueInput | Prisma.CourseGroupWhereUniqueInput[]
  disconnect?: Prisma.CourseGroupWhereUniqueInput | Prisma.CourseGroupWhereUniqueInput[]
  delete?: Prisma.CourseGroupWhereUniqueInput | Prisma.CourseGroupWhereUniqueInput[]
  connect?: Prisma.CourseGroupWhereUniqueInput | Prisma.CourseGroupWhereUniqueInput[]
  update?: Prisma.CourseGroupUpdateWithWhereUniqueWithoutCourseInput | Prisma.CourseGroupUpdateWithWhereUniqueWithoutCourseInput[]
  updateMany?: Prisma.CourseGroupUpdateManyWithWhereWithoutCourseInput | Prisma.CourseGroupUpdateManyWithWhereWithoutCourseInput[]
  deleteMany?: Prisma.CourseGroupScalarWhereInput | Prisma.CourseGroupScalarWhereInput[]
}

export type CourseGroupUncheckedUpdateManyWithoutCourseNestedInput = {
  create?: Prisma.XOR<Prisma.CourseGroupCreateWithoutCourseInput, Prisma.CourseGroupUncheckedCreateWithoutCourseInput> | Prisma.CourseGroupCreateWithoutCourseInput[] | Prisma.CourseGroupUncheckedCreateWithoutCourseInput[]
  connectOrCreate?: Prisma.CourseGroupCreateOrConnectWithoutCourseInput | Prisma.CourseGroupCreateOrConnectWithoutCourseInput[]
  upsert?: Prisma.CourseGroupUpsertWithWhereUniqueWithoutCourseInput | Prisma.CourseGroupUpsertWithWhereUniqueWithoutCourseInput[]
  createMany?: Prisma.CourseGroupCreateManyCourseInputEnvelope
  set?: Prisma.CourseGroupWhereUniqueInput | Prisma.CourseGroupWhereUniqueInput[]
  disconnect?: Prisma.CourseGroupWhereUniqueInput | Prisma.CourseGroupWhereUniqueInput[]
  delete?: Prisma.CourseGroupWhereUniqueInput | Prisma.CourseGroupWhereUniqueInput[]
  connect?: Prisma.CourseGroupWhereUniqueInput | Prisma.CourseGroupWhereUniqueInput[]
  update?: Prisma.CourseGroupUpdateWithWhereUniqueWithoutCourseInput | Prisma.CourseGroupUpdateWithWhereUniqueWithoutCourseInput[]
  updateMany?: Prisma.CourseGroupUpdateManyWithWhereWithoutCourseInput | Prisma.CourseGroupUpdateManyWithWhereWithoutCourseInput[]
  deleteMany?: Prisma.CourseGroupScalarWhereInput | Prisma.CourseGroupScalarWhereInput[]
}

export type CourseGroupCreateWithoutCourseInput = {
  id?: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type CourseGroupUncheckedCreateWithoutCourseInput = {
  id?: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type CourseGroupCreateOrConnectWithoutCourseInput = {
  where: Prisma.CourseGroupWhereUniqueInput
  create: Prisma.XOR<Prisma.CourseGroupCreateWithoutCourseInput, Prisma.CourseGroupUncheckedCreateWithoutCourseInput>
}

export type CourseGroupCreateManyCourseInputEnvelope = {
  data: Prisma.CourseGroupCreateManyCourseInput | Prisma.CourseGroupCreateManyCourseInput[]
  skipDuplicates?: boolean
}

export type CourseGroupUpsertWithWhereUniqueWithoutCourseInput = {
  where: Prisma.CourseGroupWhereUniqueInput
  update: Prisma.XOR<Prisma.CourseGroupUpdateWithoutCourseInput, Prisma.CourseGroupUncheckedUpdateWithoutCourseInput>
  create: Prisma.XOR<Prisma.CourseGroupCreateWithoutCourseInput, Prisma.CourseGroupUncheckedCreateWithoutCourseInput>
}

export type CourseGroupUpdateWithWhereUniqueWithoutCourseInput = {
  where: Prisma.CourseGroupWhereUniqueInput
  data: Prisma.XOR<Prisma.CourseGroupUpdateWithoutCourseInput, Prisma.CourseGroupUncheckedUpdateWithoutCourseInput>
}

export type CourseGroupUpdateManyWithWhereWithoutCourseInput = {
  where: Prisma.CourseGroupScalarWhereInput
  data: Prisma.XOR<Prisma.CourseGroupUpdateManyMutationInput, Prisma.CourseGroupUncheckedUpdateManyWithoutCourseInput>
}

export type CourseGroupScalarWhereInput = {
  AND?: Prisma.CourseGroupScalarWhereInput | Prisma.CourseGroupScalarWhereInput[]
  OR?: Prisma.CourseGroupScalarWhereInput[]
  NOT?: Prisma.CourseGroupScalarWhereInput | Prisma.CourseGroupScalarWhereInput[]
  id?: Prisma.StringFilter<"CourseGroup"> | string
  course_id?: Prisma.StringFilter<"CourseGroup"> | string
  createdAt?: Prisma.DateTimeFilter<"CourseGroup"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"CourseGroup"> | Date | string
}

export type CourseGroupCreateManyCourseInput = {
  id?: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type CourseGroupUpdateWithoutCourseInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CourseGroupUncheckedUpdateWithoutCourseInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CourseGroupUncheckedUpdateManyWithoutCourseInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type CourseGroupSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  course_id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  course?: boolean | Prisma.CourseDefaultArgs<ExtArgs>
}, ExtArgs["result"]["courseGroup"]>



export type CourseGroupSelectScalar = {
  id?: boolean
  course_id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type CourseGroupOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "course_id" | "createdAt" | "updatedAt", ExtArgs["result"]["courseGroup"]>
export type CourseGroupInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  course?: boolean | Prisma.CourseDefaultArgs<ExtArgs>
}

export type $CourseGroupPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "CourseGroup"
  objects: {
    course: Prisma.$CoursePayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    course_id: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["courseGroup"]>
  composites: {}
}

export type CourseGroupGetPayload<S extends boolean | null | undefined | CourseGroupDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$CourseGroupPayload, S>

export type CourseGroupCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<CourseGroupFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: CourseGroupCountAggregateInputType | true
  }

export interface CourseGroupDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CourseGroup'], meta: { name: 'CourseGroup' } }
  /**
   * Find zero or one CourseGroup that matches the filter.
   * @param {CourseGroupFindUniqueArgs} args - Arguments to find a CourseGroup
   * @example
   * // Get one CourseGroup
   * const courseGroup = await prisma.courseGroup.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends CourseGroupFindUniqueArgs>(args: Prisma.SelectSubset<T, CourseGroupFindUniqueArgs<ExtArgs>>): Prisma.Prisma__CourseGroupClient<runtime.Types.Result.GetResult<Prisma.$CourseGroupPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one CourseGroup that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {CourseGroupFindUniqueOrThrowArgs} args - Arguments to find a CourseGroup
   * @example
   * // Get one CourseGroup
   * const courseGroup = await prisma.courseGroup.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends CourseGroupFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, CourseGroupFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__CourseGroupClient<runtime.Types.Result.GetResult<Prisma.$CourseGroupPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first CourseGroup that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CourseGroupFindFirstArgs} args - Arguments to find a CourseGroup
   * @example
   * // Get one CourseGroup
   * const courseGroup = await prisma.courseGroup.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends CourseGroupFindFirstArgs>(args?: Prisma.SelectSubset<T, CourseGroupFindFirstArgs<ExtArgs>>): Prisma.Prisma__CourseGroupClient<runtime.Types.Result.GetResult<Prisma.$CourseGroupPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first CourseGroup that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CourseGroupFindFirstOrThrowArgs} args - Arguments to find a CourseGroup
   * @example
   * // Get one CourseGroup
   * const courseGroup = await prisma.courseGroup.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends CourseGroupFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, CourseGroupFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__CourseGroupClient<runtime.Types.Result.GetResult<Prisma.$CourseGroupPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more CourseGroups that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CourseGroupFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all CourseGroups
   * const courseGroups = await prisma.courseGroup.findMany()
   * 
   * // Get first 10 CourseGroups
   * const courseGroups = await prisma.courseGroup.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const courseGroupWithIdOnly = await prisma.courseGroup.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends CourseGroupFindManyArgs>(args?: Prisma.SelectSubset<T, CourseGroupFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CourseGroupPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a CourseGroup.
   * @param {CourseGroupCreateArgs} args - Arguments to create a CourseGroup.
   * @example
   * // Create one CourseGroup
   * const CourseGroup = await prisma.courseGroup.create({
   *   data: {
   *     // ... data to create a CourseGroup
   *   }
   * })
   * 
   */
  create<T extends CourseGroupCreateArgs>(args: Prisma.SelectSubset<T, CourseGroupCreateArgs<ExtArgs>>): Prisma.Prisma__CourseGroupClient<runtime.Types.Result.GetResult<Prisma.$CourseGroupPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many CourseGroups.
   * @param {CourseGroupCreateManyArgs} args - Arguments to create many CourseGroups.
   * @example
   * // Create many CourseGroups
   * const courseGroup = await prisma.courseGroup.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends CourseGroupCreateManyArgs>(args?: Prisma.SelectSubset<T, CourseGroupCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a CourseGroup.
   * @param {CourseGroupDeleteArgs} args - Arguments to delete one CourseGroup.
   * @example
   * // Delete one CourseGroup
   * const CourseGroup = await prisma.courseGroup.delete({
   *   where: {
   *     // ... filter to delete one CourseGroup
   *   }
   * })
   * 
   */
  delete<T extends CourseGroupDeleteArgs>(args: Prisma.SelectSubset<T, CourseGroupDeleteArgs<ExtArgs>>): Prisma.Prisma__CourseGroupClient<runtime.Types.Result.GetResult<Prisma.$CourseGroupPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one CourseGroup.
   * @param {CourseGroupUpdateArgs} args - Arguments to update one CourseGroup.
   * @example
   * // Update one CourseGroup
   * const courseGroup = await prisma.courseGroup.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends CourseGroupUpdateArgs>(args: Prisma.SelectSubset<T, CourseGroupUpdateArgs<ExtArgs>>): Prisma.Prisma__CourseGroupClient<runtime.Types.Result.GetResult<Prisma.$CourseGroupPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more CourseGroups.
   * @param {CourseGroupDeleteManyArgs} args - Arguments to filter CourseGroups to delete.
   * @example
   * // Delete a few CourseGroups
   * const { count } = await prisma.courseGroup.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends CourseGroupDeleteManyArgs>(args?: Prisma.SelectSubset<T, CourseGroupDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more CourseGroups.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CourseGroupUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many CourseGroups
   * const courseGroup = await prisma.courseGroup.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends CourseGroupUpdateManyArgs>(args: Prisma.SelectSubset<T, CourseGroupUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one CourseGroup.
   * @param {CourseGroupUpsertArgs} args - Arguments to update or create a CourseGroup.
   * @example
   * // Update or create a CourseGroup
   * const courseGroup = await prisma.courseGroup.upsert({
   *   create: {
   *     // ... data to create a CourseGroup
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the CourseGroup we want to update
   *   }
   * })
   */
  upsert<T extends CourseGroupUpsertArgs>(args: Prisma.SelectSubset<T, CourseGroupUpsertArgs<ExtArgs>>): Prisma.Prisma__CourseGroupClient<runtime.Types.Result.GetResult<Prisma.$CourseGroupPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of CourseGroups.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CourseGroupCountArgs} args - Arguments to filter CourseGroups to count.
   * @example
   * // Count the number of CourseGroups
   * const count = await prisma.courseGroup.count({
   *   where: {
   *     // ... the filter for the CourseGroups we want to count
   *   }
   * })
  **/
  count<T extends CourseGroupCountArgs>(
    args?: Prisma.Subset<T, CourseGroupCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], CourseGroupCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a CourseGroup.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CourseGroupAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends CourseGroupAggregateArgs>(args: Prisma.Subset<T, CourseGroupAggregateArgs>): Prisma.PrismaPromise<GetCourseGroupAggregateType<T>>

  /**
   * Group by CourseGroup.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CourseGroupGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends CourseGroupGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: CourseGroupGroupByArgs['orderBy'] }
      : { orderBy?: CourseGroupGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, CourseGroupGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCourseGroupGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the CourseGroup model
 */
readonly fields: CourseGroupFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for CourseGroup.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__CourseGroupClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  course<T extends Prisma.CourseDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.CourseDefaultArgs<ExtArgs>>): Prisma.Prisma__CourseClient<runtime.Types.Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the CourseGroup model
 */
export interface CourseGroupFieldRefs {
  readonly id: Prisma.FieldRef<"CourseGroup", 'String'>
  readonly course_id: Prisma.FieldRef<"CourseGroup", 'String'>
  readonly createdAt: Prisma.FieldRef<"CourseGroup", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"CourseGroup", 'DateTime'>
}
    

// Custom InputTypes
/**
 * CourseGroup findUnique
 */
export type CourseGroupFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CourseGroup
   */
  select?: Prisma.CourseGroupSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CourseGroup
   */
  omit?: Prisma.CourseGroupOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CourseGroupInclude<ExtArgs> | null
  /**
   * Filter, which CourseGroup to fetch.
   */
  where: Prisma.CourseGroupWhereUniqueInput
}

/**
 * CourseGroup findUniqueOrThrow
 */
export type CourseGroupFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CourseGroup
   */
  select?: Prisma.CourseGroupSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CourseGroup
   */
  omit?: Prisma.CourseGroupOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CourseGroupInclude<ExtArgs> | null
  /**
   * Filter, which CourseGroup to fetch.
   */
  where: Prisma.CourseGroupWhereUniqueInput
}

/**
 * CourseGroup findFirst
 */
export type CourseGroupFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CourseGroup
   */
  select?: Prisma.CourseGroupSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CourseGroup
   */
  omit?: Prisma.CourseGroupOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CourseGroupInclude<ExtArgs> | null
  /**
   * Filter, which CourseGroup to fetch.
   */
  where?: Prisma.CourseGroupWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CourseGroups to fetch.
   */
  orderBy?: Prisma.CourseGroupOrderByWithRelationInput | Prisma.CourseGroupOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for CourseGroups.
   */
  cursor?: Prisma.CourseGroupWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CourseGroups from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CourseGroups.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of CourseGroups.
   */
  distinct?: Prisma.CourseGroupScalarFieldEnum | Prisma.CourseGroupScalarFieldEnum[]
}

/**
 * CourseGroup findFirstOrThrow
 */
export type CourseGroupFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CourseGroup
   */
  select?: Prisma.CourseGroupSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CourseGroup
   */
  omit?: Prisma.CourseGroupOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CourseGroupInclude<ExtArgs> | null
  /**
   * Filter, which CourseGroup to fetch.
   */
  where?: Prisma.CourseGroupWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CourseGroups to fetch.
   */
  orderBy?: Prisma.CourseGroupOrderByWithRelationInput | Prisma.CourseGroupOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for CourseGroups.
   */
  cursor?: Prisma.CourseGroupWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CourseGroups from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CourseGroups.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of CourseGroups.
   */
  distinct?: Prisma.CourseGroupScalarFieldEnum | Prisma.CourseGroupScalarFieldEnum[]
}

/**
 * CourseGroup findMany
 */
export type CourseGroupFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CourseGroup
   */
  select?: Prisma.CourseGroupSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CourseGroup
   */
  omit?: Prisma.CourseGroupOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CourseGroupInclude<ExtArgs> | null
  /**
   * Filter, which CourseGroups to fetch.
   */
  where?: Prisma.CourseGroupWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CourseGroups to fetch.
   */
  orderBy?: Prisma.CourseGroupOrderByWithRelationInput | Prisma.CourseGroupOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing CourseGroups.
   */
  cursor?: Prisma.CourseGroupWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CourseGroups from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CourseGroups.
   */
  skip?: number
  distinct?: Prisma.CourseGroupScalarFieldEnum | Prisma.CourseGroupScalarFieldEnum[]
}

/**
 * CourseGroup create
 */
export type CourseGroupCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CourseGroup
   */
  select?: Prisma.CourseGroupSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CourseGroup
   */
  omit?: Prisma.CourseGroupOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CourseGroupInclude<ExtArgs> | null
  /**
   * The data needed to create a CourseGroup.
   */
  data: Prisma.XOR<Prisma.CourseGroupCreateInput, Prisma.CourseGroupUncheckedCreateInput>
}

/**
 * CourseGroup createMany
 */
export type CourseGroupCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many CourseGroups.
   */
  data: Prisma.CourseGroupCreateManyInput | Prisma.CourseGroupCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * CourseGroup update
 */
export type CourseGroupUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CourseGroup
   */
  select?: Prisma.CourseGroupSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CourseGroup
   */
  omit?: Prisma.CourseGroupOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CourseGroupInclude<ExtArgs> | null
  /**
   * The data needed to update a CourseGroup.
   */
  data: Prisma.XOR<Prisma.CourseGroupUpdateInput, Prisma.CourseGroupUncheckedUpdateInput>
  /**
   * Choose, which CourseGroup to update.
   */
  where: Prisma.CourseGroupWhereUniqueInput
}

/**
 * CourseGroup updateMany
 */
export type CourseGroupUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update CourseGroups.
   */
  data: Prisma.XOR<Prisma.CourseGroupUpdateManyMutationInput, Prisma.CourseGroupUncheckedUpdateManyInput>
  /**
   * Filter which CourseGroups to update
   */
  where?: Prisma.CourseGroupWhereInput
  /**
   * Limit how many CourseGroups to update.
   */
  limit?: number
}

/**
 * CourseGroup upsert
 */
export type CourseGroupUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CourseGroup
   */
  select?: Prisma.CourseGroupSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CourseGroup
   */
  omit?: Prisma.CourseGroupOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CourseGroupInclude<ExtArgs> | null
  /**
   * The filter to search for the CourseGroup to update in case it exists.
   */
  where: Prisma.CourseGroupWhereUniqueInput
  /**
   * In case the CourseGroup found by the `where` argument doesn't exist, create a new CourseGroup with this data.
   */
  create: Prisma.XOR<Prisma.CourseGroupCreateInput, Prisma.CourseGroupUncheckedCreateInput>
  /**
   * In case the CourseGroup was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.CourseGroupUpdateInput, Prisma.CourseGroupUncheckedUpdateInput>
}

/**
 * CourseGroup delete
 */
export type CourseGroupDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CourseGroup
   */
  select?: Prisma.CourseGroupSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CourseGroup
   */
  omit?: Prisma.CourseGroupOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CourseGroupInclude<ExtArgs> | null
  /**
   * Filter which CourseGroup to delete.
   */
  where: Prisma.CourseGroupWhereUniqueInput
}

/**
 * CourseGroup deleteMany
 */
export type CourseGroupDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which CourseGroups to delete
   */
  where?: Prisma.CourseGroupWhereInput
  /**
   * Limit how many CourseGroups to delete.
   */
  limit?: number
}

/**
 * CourseGroup without action
 */
export type CourseGroupDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CourseGroup
   */
  select?: Prisma.CourseGroupSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CourseGroup
   */
  omit?: Prisma.CourseGroupOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CourseGroupInclude<ExtArgs> | null
}
