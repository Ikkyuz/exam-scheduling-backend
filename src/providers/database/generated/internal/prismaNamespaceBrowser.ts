
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * WARNING: This is an internal file that is subject to change!
 *
 * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘
 *
 * All exports from this file are wrapped under a `Prisma` namespace object in the browser.ts file.
 * While this enables partial backward compatibility, it is not part of the stable public API.
 *
 * If you are looking for your Models, Enums, and Input Types, please import them from the respective
 * model files in the `model` directory!
 */

import * as runtime from "@prisma/client/runtime/index-browser"

export type * from '../models.js'
export type * from './prismaNamespace.js'

export const Decimal = runtime.Decimal


export const NullTypes = {
  DbNull: runtime.objectEnumValues.classes.DbNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.DbNull),
  JsonNull: runtime.objectEnumValues.classes.JsonNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.JsonNull),
  AnyNull: runtime.objectEnumValues.classes.AnyNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.AnyNull),
}
/**
 * Helper for filtering JSON entries that have `null` on the database (empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const DbNull = runtime.objectEnumValues.instances.DbNull
/**
 * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const JsonNull = runtime.objectEnumValues.instances.JsonNull
/**
 * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const AnyNull = runtime.objectEnumValues.instances.AnyNull


export const ModelName = {
  Department: 'Department',
  Course: 'Course',
  Class: 'Class',
  Enrollment: 'Enrollment',
  CourseGroup: 'CourseGroup',
  Room: 'Room',
  Teacher: 'Teacher',
  ProctorPair: 'ProctorPair',
  User: 'User',
  Token: 'Token'
} as const

export type ModelName = (typeof ModelName)[keyof typeof ModelName]

/*
 * Enums
 */

export const TransactionIsolationLevel = runtime.makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
} as const)

export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


export const DepartmentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type DepartmentScalarFieldEnum = (typeof DepartmentScalarFieldEnum)[keyof typeof DepartmentScalarFieldEnum]


export const CourseScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  duration: 'duration',
  examType: 'examType',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type CourseScalarFieldEnum = (typeof CourseScalarFieldEnum)[keyof typeof CourseScalarFieldEnum]


export const ClassScalarFieldEnum = {
  id: 'id',
  name: 'name',
  level: 'level',
  classYear: 'classYear',
  department_id: 'department_id',
  amount: 'amount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type ClassScalarFieldEnum = (typeof ClassScalarFieldEnum)[keyof typeof ClassScalarFieldEnum]


export const EnrollmentScalarFieldEnum = {
  id: 'id',
  class_id: 'class_id',
  course_id: 'course_id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type EnrollmentScalarFieldEnum = (typeof EnrollmentScalarFieldEnum)[keyof typeof EnrollmentScalarFieldEnum]


export const CourseGroupScalarFieldEnum = {
  id: 'id',
  course_id: 'course_id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type CourseGroupScalarFieldEnum = (typeof CourseGroupScalarFieldEnum)[keyof typeof CourseGroupScalarFieldEnum]


export const RoomScalarFieldEnum = {
  id: 'id',
  roomNumber: 'roomNumber',
  building: 'building',
  floor: 'floor',
  capacity: 'capacity',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type RoomScalarFieldEnum = (typeof RoomScalarFieldEnum)[keyof typeof RoomScalarFieldEnum]


export const TeacherScalarFieldEnum = {
  id: 'id',
  name: 'name',
  department_id: 'department_id',
  tel: 'tel',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type TeacherScalarFieldEnum = (typeof TeacherScalarFieldEnum)[keyof typeof TeacherScalarFieldEnum]


export const ProctorPairScalarFieldEnum = {
  id: 'id',
  teacher_id: 'teacher_id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type ProctorPairScalarFieldEnum = (typeof ProctorPairScalarFieldEnum)[keyof typeof ProctorPairScalarFieldEnum]


export const UserScalarFieldEnum = {
  id: 'id',
  firstname: 'firstname',
  lastname: 'lastname',
  username: 'username',
  password: 'password',
  email: 'email',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


export const TokenScalarFieldEnum = {
  id: 'id',
  token: 'token',
  user_id: 'user_id',
  expires_at: 'expires_at',
  created_at: 'created_at',
  updated_at: 'updated_at'
} as const

export type TokenScalarFieldEnum = (typeof TokenScalarFieldEnum)[keyof typeof TokenScalarFieldEnum]


export const SortOrder = {
  asc: 'asc',
  desc: 'desc'
} as const

export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


export const DepartmentOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name'
} as const

export type DepartmentOrderByRelevanceFieldEnum = (typeof DepartmentOrderByRelevanceFieldEnum)[keyof typeof DepartmentOrderByRelevanceFieldEnum]


export const CourseOrderByRelevanceFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name'
} as const

export type CourseOrderByRelevanceFieldEnum = (typeof CourseOrderByRelevanceFieldEnum)[keyof typeof CourseOrderByRelevanceFieldEnum]


export const ClassOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  classYear: 'classYear',
  department_id: 'department_id'
} as const

export type ClassOrderByRelevanceFieldEnum = (typeof ClassOrderByRelevanceFieldEnum)[keyof typeof ClassOrderByRelevanceFieldEnum]


export const EnrollmentOrderByRelevanceFieldEnum = {
  id: 'id',
  class_id: 'class_id',
  course_id: 'course_id'
} as const

export type EnrollmentOrderByRelevanceFieldEnum = (typeof EnrollmentOrderByRelevanceFieldEnum)[keyof typeof EnrollmentOrderByRelevanceFieldEnum]


export const CourseGroupOrderByRelevanceFieldEnum = {
  id: 'id',
  course_id: 'course_id'
} as const

export type CourseGroupOrderByRelevanceFieldEnum = (typeof CourseGroupOrderByRelevanceFieldEnum)[keyof typeof CourseGroupOrderByRelevanceFieldEnum]


export const RoomOrderByRelevanceFieldEnum = {
  id: 'id',
  roomNumber: 'roomNumber',
  building: 'building',
  floor: 'floor'
} as const

export type RoomOrderByRelevanceFieldEnum = (typeof RoomOrderByRelevanceFieldEnum)[keyof typeof RoomOrderByRelevanceFieldEnum]


export const TeacherOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  department_id: 'department_id',
  tel: 'tel'
} as const

export type TeacherOrderByRelevanceFieldEnum = (typeof TeacherOrderByRelevanceFieldEnum)[keyof typeof TeacherOrderByRelevanceFieldEnum]


export const ProctorPairOrderByRelevanceFieldEnum = {
  id: 'id',
  teacher_id: 'teacher_id'
} as const

export type ProctorPairOrderByRelevanceFieldEnum = (typeof ProctorPairOrderByRelevanceFieldEnum)[keyof typeof ProctorPairOrderByRelevanceFieldEnum]


export const NullsOrder = {
  first: 'first',
  last: 'last'
} as const

export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


export const UserOrderByRelevanceFieldEnum = {
  id: 'id',
  firstname: 'firstname',
  lastname: 'lastname',
  username: 'username',
  password: 'password',
  email: 'email'
} as const

export type UserOrderByRelevanceFieldEnum = (typeof UserOrderByRelevanceFieldEnum)[keyof typeof UserOrderByRelevanceFieldEnum]


export const TokenOrderByRelevanceFieldEnum = {
  id: 'id',
  token: 'token',
  user_id: 'user_id'
} as const

export type TokenOrderByRelevanceFieldEnum = (typeof TokenOrderByRelevanceFieldEnum)[keyof typeof TokenOrderByRelevanceFieldEnum]

